// <auto-generated />
using System;
using GalleryDAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GalleryDAL.Migrations
{
    [DbContext(typeof(GalleryDbContext))]
    [Migration("20210527133436_IdentityM")]
    partial class IdentityM
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "C.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GalleryDAL.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('artists_id_artist_seq'::regclass)");

                    b.Property<string>("AddInfo")
                        .HasColumnType("character varying")
                        .HasColumnName("add_info");

                    b.Property<string>("ArtDirection")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("art_direction");

                    b.Property<DateTime>("Bday")
                        .HasColumnType("date")
                        .HasColumnName("bday");

                    b.Property<DateTime?>("Death")
                        .HasColumnType("date")
                        .HasColumnName("death");

                    b.Property<int?>("IdCity")
                        .HasColumnType("integer")
                        .HasColumnName("id_city");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.Property<string>("Telephone")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("telephone");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.HasIndex(new[] { "Telephone" }, "artists_telephone_key")
                        .IsUnique();

                    b.ToTable("artists");
                });

            modelBuilder.Entity("GalleryDAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('cities_id_city_seq'::regclass)");

                    b.Property<int>("IdCountry")
                        .HasColumnType("integer")
                        .HasColumnName("id_country");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('countries_id_country_seq'::regclass)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "countries_name_key")
                        .IsUnique();

                    b.ToTable("countries");
                });

            modelBuilder.Entity("GalleryDAL.Entities.CurrentExhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('current_exhibitions_id_curr_exh_seq'::regclass)");

                    b.Property<DateTime?>("DateBegin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_begin")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DateEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("date_end")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("integer")
                        .HasColumnName("id_employee");

                    b.Property<int>("IdExh")
                        .HasColumnType("integer")
                        .HasColumnName("id_exh");

                    b.Property<int>("IdExhPlace")
                        .HasColumnType("integer")
                        .HasColumnName("id_exh_place");

                    b.HasKey("Id");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdExh");

                    b.HasIndex("IdExhPlace");

                    b.ToTable("current_exhibitions");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('employees_id_employee_seq'::regclass)");

                    b.Property<string>("AddInfo")
                        .HasColumnType("text")
                        .HasColumnName("add_info");

                    b.Property<DateTime?>("Bday")
                        .HasColumnType("date")
                        .HasColumnName("bday");

                    b.Property<int>("IdCity")
                        .HasColumnType("integer")
                        .HasColumnName("id_city");

                    b.Property<string>("Job")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("job");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("surname");

                    b.Property<string>("Telephone")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.HasIndex(new[] { "Telephone" }, "employees_telephone_key")
                        .IsUnique();

                    b.ToTable("employees");
                });

            modelBuilder.Entity("GalleryDAL.Entities.ExhibitPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('exhibit_places_id_exh_place_seq'::regclass)");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int>("IdCity")
                        .HasColumnType("integer")
                        .HasColumnName("id_city");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<int?>("Telephone")
                        .HasColumnType("integer")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.ToTable("exhibit_places");
                });

            modelBuilder.Entity("GalleryDAL.Entities.ExhibitedPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('exhibited_pictures_id_exh_pic_seq'::regclass)");

                    b.Property<int>("IdCurrExh")
                        .HasColumnType("integer")
                        .HasColumnName("id_curr_exh");

                    b.Property<int>("IdPicture")
                        .HasColumnType("integer")
                        .HasColumnName("id_picture");

                    b.Property<int>("Room")
                        .HasColumnType("integer")
                        .HasColumnName("room");

                    b.HasKey("Id");

                    b.HasIndex("IdCurrExh");

                    b.HasIndex("IdPicture");

                    b.ToTable("exhibited_pictures");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('exhibitions_id_exh_seq'::regclass)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("exhibitions");
                });

            modelBuilder.Entity("GalleryDAL.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "news_id_uindex")
                        .IsUnique();

                    b.ToTable("news");
                });

            modelBuilder.Entity("GalleryDAL.Entities.OwnedPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('owned_pictures_id_owned_picture_seq'::regclass)");

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("date")
                        .HasColumnName("buy_date");

                    b.Property<int?>("IdOwner")
                        .HasColumnType("integer")
                        .HasColumnName("id_owner");

                    b.Property<int>("IdPicture")
                        .HasColumnType("integer")
                        .HasColumnName("id_picture");

                    b.HasKey("Id");

                    b.HasIndex("IdOwner");

                    b.HasIndex(new[] { "IdPicture" }, "owned_pictures_id_picture_key")
                        .IsUnique();

                    b.ToTable("owned_pictures");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('owners_id_owner_seq'::regclass)");

                    b.Property<string>("BankAcc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_acc");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("surname");

                    b.Property<string>("Telephone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BankAcc" }, "owners_bank_acc_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Telephone" }, "owners_telephone_key")
                        .IsUnique();

                    b.ToTable("owners");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('pictures_id_picture_seq'::regclass)");

                    b.Property<string>("AddInfo")
                        .HasColumnType("text")
                        .HasColumnName("add_info");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("create_date");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("genre");

                    b.Property<int>("IdArtist")
                        .HasColumnType("integer")
                        .HasColumnName("id_artist");

                    b.Property<int>("IdTechnique")
                        .HasColumnType("integer")
                        .HasColumnName("id_technique");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("IdArtist");

                    b.HasIndex("IdTechnique");

                    b.ToTable("pictures");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Technique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('techniques_id_technique_seq'::regclass)");

                    b.Property<string>("Base")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("base");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.Property<string>("Paint")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("paint");

                    b.Property<string>("PicUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("picUrl");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "techniques_name_key")
                        .IsUnique();

                    b.ToTable("techniques");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('tickets_id_ticket_seq'::regclass)");

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("date")
                        .HasColumnName("buy_date");

                    b.Property<int?>("CurExhId")
                        .HasColumnType("integer")
                        .HasColumnName("curExhId");

                    b.HasKey("Id");

                    b.HasIndex("CurExhId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("GalleryDAL.Entities.TicketsInCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('ticket_in_cart_id_seq'::regclass)");

                    b.Property<string>("CartId")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticketId");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("integer")
                        .HasColumnName("totalPrice");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex(new[] { "Id" }, "ticket_in_cart_id_uindex")
                        .IsUnique();

                    b.ToTable("tickets_in_cart");
                });

            modelBuilder.Entity("GalleryDAL.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Artist", b =>
                {
                    b.HasOne("GalleryDAL.Entities.City", "City")
                        .WithMany("Artists")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("artists_id_city_fkey");

                    b.Navigation("City");
                });

            modelBuilder.Entity("GalleryDAL.Entities.City", b =>
                {
                    b.HasOne("GalleryDAL.Entities.Country", "IdCountryNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("cities_id_country_fkey")
                        .IsRequired();

                    b.Navigation("IdCountryNavigation");
                });

            modelBuilder.Entity("GalleryDAL.Entities.CurrentExhibition", b =>
                {
                    b.HasOne("GalleryDAL.Entities.Employee", "IdEmployeeNavigation")
                        .WithMany("CurrentExhibitions")
                        .HasForeignKey("IdEmployee")
                        .HasConstraintName("current_exhibitions_id_employee_fkey")
                        .IsRequired();

                    b.HasOne("GalleryDAL.Entities.Exhibition", "IdExhNavigation")
                        .WithMany("CurrentExhibitions")
                        .HasForeignKey("IdExh")
                        .HasConstraintName("current_exhibitions_id_exh_fkey")
                        .IsRequired();

                    b.HasOne("GalleryDAL.Entities.ExhibitPlace", "IdExhPlaceNavigation")
                        .WithMany("CurrentExhibitions")
                        .HasForeignKey("IdExhPlace")
                        .HasConstraintName("current_exhibitions_id_exh_place_fkey")
                        .IsRequired();

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdExhNavigation");

                    b.Navigation("IdExhPlaceNavigation");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Employee", b =>
                {
                    b.HasOne("GalleryDAL.Entities.City", "IdCityNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("employees_id_city_fkey")
                        .IsRequired();

                    b.Navigation("IdCityNavigation");
                });

            modelBuilder.Entity("GalleryDAL.Entities.ExhibitPlace", b =>
                {
                    b.HasOne("GalleryDAL.Entities.City", "IdCityNavigation")
                        .WithMany("ExhibitPlaces")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("exhibit_places_id_city_fkey")
                        .IsRequired();

                    b.Navigation("IdCityNavigation");
                });

            modelBuilder.Entity("GalleryDAL.Entities.ExhibitedPicture", b =>
                {
                    b.HasOne("GalleryDAL.Entities.CurrentExhibition", "IdCurrExhNavigation")
                        .WithMany("ExhibitedPictures")
                        .HasForeignKey("IdCurrExh")
                        .HasConstraintName("exhibited_pictures_id_curr_exh_fkey")
                        .IsRequired();

                    b.HasOne("GalleryDAL.Entities.Picture", "IdPictureNavigation")
                        .WithMany("ExhibitedPictures")
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("exhibited_pictures_id_picture_fkey")
                        .IsRequired();

                    b.Navigation("IdCurrExhNavigation");

                    b.Navigation("IdPictureNavigation");
                });

            modelBuilder.Entity("GalleryDAL.Entities.OwnedPicture", b =>
                {
                    b.HasOne("GalleryDAL.Entities.Owner", "IdOwnerNavigation")
                        .WithMany("OwnedPictures")
                        .HasForeignKey("IdOwner")
                        .HasConstraintName("owned_pictures_id_owner_fkey");

                    b.HasOne("GalleryDAL.Entities.Picture", "IdPictureNavigation")
                        .WithOne("OwnedPicture")
                        .HasForeignKey("GalleryDAL.Entities.OwnedPicture", "IdPicture")
                        .HasConstraintName("owned_pictures_id_picture_fkey")
                        .IsRequired();

                    b.Navigation("IdOwnerNavigation");

                    b.Navigation("IdPictureNavigation");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Picture", b =>
                {
                    b.HasOne("GalleryDAL.Entities.Artist", "IdArtistNavigation")
                        .WithMany("Pictures")
                        .HasForeignKey("IdArtist")
                        .HasConstraintName("pictures_id_artist_fkey")
                        .IsRequired();

                    b.HasOne("GalleryDAL.Entities.Technique", "IdTechniqueNavigation")
                        .WithMany("Pictures")
                        .HasForeignKey("IdTechnique")
                        .HasConstraintName("pictures_id_technique_fkey")
                        .IsRequired();

                    b.Navigation("IdArtistNavigation");

                    b.Navigation("IdTechniqueNavigation");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Ticket", b =>
                {
                    b.HasOne("GalleryDAL.Entities.CurrentExhibition", "CurExh")
                        .WithMany("Tickets")
                        .HasForeignKey("CurExhId")
                        .HasConstraintName("tickets_current_exhibitions_id_fk")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurExh");
                });

            modelBuilder.Entity("GalleryDAL.Entities.TicketsInCart", b =>
                {
                    b.HasOne("GalleryDAL.Entities.Ticket", "Ticket")
                        .WithMany("TicketsInCarts")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("ticket_in_cart___fk_ticket")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GalleryDAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GalleryDAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GalleryDAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GalleryDAL.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GalleryDAL.Entities.Artist", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("GalleryDAL.Entities.City", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Employees");

                    b.Navigation("ExhibitPlaces");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("GalleryDAL.Entities.CurrentExhibition", b =>
                {
                    b.Navigation("ExhibitedPictures");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Employee", b =>
                {
                    b.Navigation("CurrentExhibitions");
                });

            modelBuilder.Entity("GalleryDAL.Entities.ExhibitPlace", b =>
                {
                    b.Navigation("CurrentExhibitions");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Exhibition", b =>
                {
                    b.Navigation("CurrentExhibitions");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Owner", b =>
                {
                    b.Navigation("OwnedPictures");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Picture", b =>
                {
                    b.Navigation("ExhibitedPictures");

                    b.Navigation("OwnedPicture");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Technique", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("GalleryDAL.Entities.Ticket", b =>
                {
                    b.Navigation("TicketsInCarts");
                });
#pragma warning restore 612, 618
        }
    }
}
